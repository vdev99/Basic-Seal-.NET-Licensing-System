// <auto-generated />
using System;
using BasicSealBackend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BasicSealBackend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201228133354_firstMigration")]
    partial class firstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BasicSealBackend.Models.SoftwareLicenses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CpuIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("HddIdentifier")
                        .HasColumnType("text");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLifetime")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LicenseEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("text");

                    b.Property<int>("LicenseLength")
                        .HasColumnType("int");

                    b.Property<DateTime>("LicenseStartDate")
                        .HasColumnType("datetime");

                    b.Property<long>("SoftwareId")
                        .HasColumnType("bigint");

                    b.Property<string>("SystemUUID")
                        .HasColumnType("text");

                    b.Property<bool>("enableOfflineVerification")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareId");

                    b.ToTable("SoftwareLicenses");
                });

            modelBuilder.Entity("BasicSealBackend.Models.SoftwareVersions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<long>("SoftwareId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareId");

                    b.HasIndex("UserId");

                    b.ToTable("SoftwareVersions");
                });

            modelBuilder.Entity("BasicSealBackend.Models.Softwares", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("SoftwareName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("BasicSealBackend.Models.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BasicSealBackend.Models.SoftwareLicenses", b =>
                {
                    b.HasOne("BasicSealBackend.Models.Softwares", "Softwares")
                        .WithMany("SoftwareLicenses")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasicSealBackend.Models.SoftwareVersions", b =>
                {
                    b.HasOne("BasicSealBackend.Models.Softwares", "Softwares")
                        .WithMany("SoftwareVersions")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BasicSealBackend.Models.Users", "Users")
                        .WithMany("SoftwareVersions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasicSealBackend.Models.Softwares", b =>
                {
                    b.HasOne("BasicSealBackend.Models.Users", "Users")
                        .WithMany("Softwares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
